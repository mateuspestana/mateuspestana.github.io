<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cracking | Mateus C. Pestana</title>
    <link>https://mateuspestana.github.io/tag/cracking/</link>
      <atom:link href="https://mateuspestana.github.io/tag/cracking/index.xml" rel="self" type="application/rss+xml" />
    <description>cracking</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>pt</language><copyright>© 2021 Matheus C. Pestana</copyright><lastBuildDate>Sun, 01 Dec 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://mateuspestana.github.io/media/icon_huae0488878dbc9b7066571374604548ea_453288_512x512_fill_lanczos_center_2.png</url>
      <title>cracking</title>
      <link>https://mateuspestana.github.io/tag/cracking/</link>
    </image>
    
    <item>
      <title>Pwnagotchi: segurança de redes e inteligência artificial</title>
      <link>https://mateuspestana.github.io/post/pwnagotchi/pwnagotchi-seguranca-de-redes-e-inteligencia-artificial/</link>
      <pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://mateuspestana.github.io/post/pwnagotchi/pwnagotchi-seguranca-de-redes-e-inteligencia-artificial/</guid>
      <description>
&lt;script src=&#34;2019-12-01-pwnagotchi-segurança-de-redes-e-inteligência-artificial_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Além da área de ciência de dados, um tema que eu gosto muito é o de &lt;em&gt;pentesting&lt;/em&gt;, abreviação de &lt;em&gt;penetration test&lt;/em&gt;, teste de penetração/intrusão, onde (legalmente) testamos sistemas para explorar suas falhas, comprovar fraquezas e então consertá-las. Em um mundo que é direcionado aos dados, a segurança dos mesmos é fundamental. Acompanho a área há alguns anos, mas por conta do mestrado, fiquei um pouco por fora.&lt;/p&gt;
&lt;p&gt;Felizmente, agora eu posso dizer que &lt;em&gt;pentesting&lt;/em&gt; não é mais tão fora dos meus estudos assim :)&lt;/p&gt;
&lt;p&gt;Conheci um projeto muito interessante chamado &lt;a href=&#34;https://pwnagotchi.ai/&#34;&gt;&lt;strong&gt;Pwnagotchi&lt;/strong&gt;&lt;/a&gt; que utiliza &lt;em&gt;reinforcement learning&lt;/em&gt;, um algoritmo de &lt;em&gt;machine learning&lt;/em&gt; (e que, de certa forma, podemos chamar de inteligência artificial) para capturar dados wifi e testar a segurança dessas redes, tudo isso utilizando um simples Raspberry Pi Zero W, como o da foto abaixo, que apesar de medir somente 6,5cm x 3 cm, é equipado com módulo Wifi, mini-HDMI, 512mb de RAM, bluetooth, 1 Ghz de CPU e conector de câmera, tudo isso funcionando com um cartão SD!
&lt;img src=&#34;https://www.raspberrypi.org/homepage-9df4b/static/9c6a7cd9c5f442d4279bd6862bef1657/bc3a8/72a529ca180136e5ab43dcf1547253238e273b8b_pi-zero-w-tilt-1-1620x1080.jpg&#34; alt=&#34;Fonte: raspberrypi.org&#34; /&gt;
Para um computador pessoal, o Raspberry PI Zero W pode deixar a desejar, mas para tarefas mais simples, como a que veremos hoje, ele funciona muito bem e possui um baixo preço (entre R$ 120,00 e R$ 200,00 ), rodando linux em versões próprias do kernel, que permitem a máxima potência disponível no produto.&lt;/p&gt;
&lt;div id=&#34;redes-wi-fi&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Redes Wi-Fi&lt;/h3&gt;
&lt;p&gt;Mas antes de falarmos do &lt;strong&gt;Pwnagotchi&lt;/strong&gt;, vamos falar sobre redes Wi-fi e entender qual o problema por trás delas. Redes sem-fio apresentam um sem número de falhas, que não são verdadeiros problemas das redes em si, mas que são descobertos dado o seu uso disseminado em praticamente todas as coisas atualmente (de routers pessoais à geladeiras e lâmpadas - IoT - &lt;em&gt;internet of things&lt;/em&gt;). Essa é quase um mandamento da informática: quanto mais fechado é um sistema e mais usado ele é, mais falhas serão descobertas nele. Com o Wi-Fi não é diferente.&lt;/p&gt;
&lt;p&gt;Alguns podem perguntar: &lt;em&gt;qual o problema de uma pessoa invadir a minha rede e utilizar a minha internet?&lt;/em&gt; Bom, quando sujeitamos nossas redes à outros, essas pessoas podem efetuar ataques à estabilidade da mesma, inserir grampos e filtrar dados (descobrindo senhas, sites visitados, etc), desviar o tráfego (te direcionando para um site malicioso com o intuito de roubar seus dados), dentre outras coisas. Por isso a força em uma senha é fundamental, ou seja, conter mais de 8 dígitos, misturar letras (maiúsculas e minúsculas), números e símbolos, não utilizar palavras prontas, mas uma mistura delas, são coisas fundamentais. Seres humanos não conseguem adivinhar senhas por tentativa-e-erro, mas computadores sim, e podem fazê-lo numa velocidade impressionante (com mais de 100 mil tentativas por segundo!).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;OK, mas como eles invadem meu Wi-Fi?&lt;/em&gt; Bom, a grosso modo, o Wi-Fi, por ser transmitido pelo ar, mesmo que tenha senha, alguns dados ficam abertos. Esses dados se referem à autenticação, ou seja, quando conectamos ao modem/router. Para conectarmos, ocorre um processo entre o computador e o router chamado &lt;em&gt;4-way handshake&lt;/em&gt; (no caso de redes que utilizam a chave WPA), um &lt;em&gt;“aperto de mão”&lt;/em&gt; entre as máquinas, que gera pacotes no ar, e esses pacotes, quando &lt;em&gt;sniffados&lt;/em&gt; (capturados), permitem que uma pessoa mal intencionada possa fazer testes de tentativa-e-erro para encontrar a senha. No caso de redes WEP, mais antigas, é mais fácil e rápido.&lt;/p&gt;
&lt;p&gt;Aí entra o papel da senha forte: para encontrar a senha, o hacker precisa de &lt;em&gt;wordlists&lt;/em&gt;, que são listas de palavras com possibilidades de senha. Ao tentar uma por uma, ao chegar na certa, a criptografia é quebrada e a senha se torna visível. Todavia, se a senha não estiver na &lt;em&gt;wordlist&lt;/em&gt;, isso nunca acontecerá, ou se for grande demais, pode até ser previsível, mas levaria anos para testar combinação por combinação.&lt;/p&gt;
&lt;p&gt;Para capturar os &lt;em&gt;handshakes&lt;/em&gt; (mais detalhes do funcionamento &lt;a href=&#34;https://www.wifi-professionals.com/2019/01/4-way-handshake&#34;&gt;aqui&lt;/a&gt;) e testar a vulnerabilidade da rede, um conjunto de ferramentas é utilizado, como o aircrack-ng, wireshark, bettercap, dentre outros, cuja utilização foge ao escopo do post (quem sabe um dia…). E essas ferramentas possuem um grande número de configurações que precisam ser testadas, iteradas e alteradas para que consigamos esses pacotes, como os canais monitorados (que precisam variar todo instante), o sinal do Wi-fi, o tempo de reconhecimento em cada canal, o tempo para saltar de um canal para outro, o número de associações que podemos fazer, quantas vezes podemos tentar reconectar com a rede antes de tentar uma outra, etc. Para quem fazia manualmente (como eu), era um trabalho hercúleo que exigia paciência e técnica, e às vezes simplesmente não funcionava (quando um dos dois faltavam, geralmente paciência). E é aí que entra o &lt;strong&gt;Pwnagotchi&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://www.wifi-professionals.com/wp-content/uploads/2019/01/4-WAY-handshake.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Fonte: Wifi-Professionals.com&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;pwnagotchi&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Pwnagotchi&lt;/h3&gt;
&lt;p&gt;O Pwnagotchi utiliza um algoritmo chamado A2C (&lt;em&gt;Advantage-Actor-Critic&lt;/em&gt;), que é uma espécie de algoritmos de &lt;em&gt;reinforcement learning&lt;/em&gt;, fazendo parte do que é comumente (e muitas vezes, erroneamente) chamado de Inteligência Artificial. O que o A2C faz? De modo simples, ele (o ator) executa ações em busca de recompensas, tendo um valor esperado de recompensas, então a outra parte (o crítico) mensura, dentre aquelas ações, quais geraram mais recompensas, e essas passarão a ser mais utilizadas (ou utilizadas primeiro) para que a recompensa seja maximizada. Em um famoso exemplo, o algoritmo programado aprende a jogar &lt;em&gt;Sonic the Hedgehog&lt;/em&gt; e consegue passar todas as fases : &lt;a href=&#34;https://www.youtube.com/watch?v=GCfUdkCL7FQ&#34; class=&#34;uri&#34;&gt;https://www.youtube.com/watch?v=GCfUdkCL7FQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;O que está acontecendo? Ao algoritmo, é dado o jogo (com suas fases, obstáculos, argolas, etc) e os comandos possíveis: avançar, voltar, pular, rolar. É ensinado também que existem argolas, que representam a recompensa para o algoritmo: quanto mais, melhor. Inicialmente, ele jogará de maneira quase que aleatória. Ao longo do tempo, ele vai percebendo que, em certos momentos, pular foi mais vantajoso que avançar, ou que rolar em determinada parte garantiu mais argolas, e guarda essas informações. Aos poucos, ele vai executando essas ações nos momentos certos para que sempre consiga o maior número possível de recompensas. Em algumas milhares de execuções (feitas em segundos/minutos pelo computador), o algoritmo já consegue jogar &lt;em&gt;Sonic&lt;/em&gt; com destreza.&lt;/p&gt;
&lt;p&gt;Para entender melhor o algoritmo A2C, recomendo o site &lt;a href=&#34;https://hackernoon.com/intuitive-rl-intro-to-advantage-actor-critic-a2c-4ff545978752&#34;&gt;hackernoon.com&lt;/a&gt;, que, com os quadrinhos (muito fofos, aliás!) do @&lt;a href=&#34;https://twitter.com/embermarke&#34;&gt;embermarke&lt;/a&gt;, permite uma compreensão melhor dos fundamentos do algoritmo.&lt;/p&gt;
&lt;p&gt;A mesma coisa é feita pelo Pwnagotchi: as configurações que citei anteriormente são as ações possíveis, e os handshakes são as recompensas. Com o uso, o aparelho executa um cálculo pra determinar o valor da recompensa em determinadas configurações, e busca sempre maximizá-lo, em tempo real. Ou seja, quanto mais você utiliza o Pwnagotchi, mais ele aprende e melhor consegue capturar os &lt;em&gt;handshakes&lt;/em&gt;, já que ele, de forma inteligente, consegue alterar as próprias configurações para aquele cenário.&lt;/p&gt;
&lt;p&gt;Para utilizá-lo, basta gravar a imagem, disponível &lt;a href=&#34;https://github.com/evilsocket/pwnagotchi/releases&#34;&gt;aqui&lt;/a&gt; em um cartão SD, alterar as configurações iniciais (como o nome do seu &lt;strong&gt;pwnagotchi&lt;/strong&gt;), inserí-lo no RaspberryPi Zero W, ligar em uma bateria (aqueles carregadores portáteis de celular são ótimos para isso!) e sair por aí, enquanto ele tenta capturar &lt;strong&gt;handshakes&lt;/strong&gt;. Algumas pessoas inserem telas e-ink (como a do Kindle ou do Lev) para que possam observar o trabalho do sistema em tempo real. A graça disso é que o desenvolvedor inseriu uma interface ultra amigável que aparece nessa tela, com pequenos rostinhos que indicam a atividade realizada, além de alguns outros dados. Esses rostinhoslembram muito um Tamagotchi, daí o nome: Pwnagotchi.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://media.giphy.com/media/f9GsXyfgEQbY65fnhu/source.gif&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Parece mesmo um Tamagotchi!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Para aqueles que, como eu, não desejam soldar uma tela e-ink no Pi, é possível acessar pela Web e ter uma ideia do que está acontecendo naquele momento. Além disso, o sistema também é acessado por SSH, permitindo alteração das configurações, download dos handshakes, atualizações, etc.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://mateuspestana.github.io/img/tela_pwnagotchi.jpeg&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Meu pwnagotchi, sendo exibido na tela do computador quando conectado no USB&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;O sistema suporta scripts que aprimoram a utilização do pwnagotchi, como por exemplo, registrar a localização GPS, fazer upload dos handshakes para plataformas de quebra de senhas, inserir temperatura, CPU e uso da memória na tela, fazer tethering pelo bluetooth, além de muitos outros.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mateuspestana.github.io/img/aberto_pwnagotchi.jpeg&#34; /&gt;
&lt;img src=&#34;https://mateuspestana.github.io/img/fechado_pwnagotchi.jpeg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Acima, minha montagem do Pwnagotchi, com o raspberry inserido em uma &lt;em&gt;case&lt;/em&gt; que imprimi em 3D, para proteger de poeira e contatos. Lembram que afirmei disse que era preciso escolher um nome para o seu pwnagotchi? O motivo por trás disso se chama PwnGrid, a rede de todos os Pwnagotchi (que você pode optar participar ou não). Nela, existe um rank de pwnagotchis, mostrando quantas redes você já “capturou”, por quanto tempo rodou e por quanto tempo seu algoritmo treinou! É como um &lt;em&gt;PokemonGo&lt;/em&gt; para redes wi-fi. O mapa da PwnGrid pode ser visto aqui &lt;a href=&#34;https://pwnagotchi.ai/map/&#34;&gt;https://pwnagotchi.ai/map/&lt;/a&gt;,&lt;/p&gt;
&lt;p&gt;A PwnGrid também é equipada com o PwnMail, um serviço de mensagens criptogradas e seguras pela internet, utilizando o dispositivo. Cada pwnagotchi tem sua própria chave pública, que permite o envio e recebimento de mensagens.&lt;/p&gt;
&lt;p&gt;Se alguém quiser me contatar por lá, minha chave é:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;873471cc5a10aa546947327da150bf0407a4d21fb091183cf3be2b2a19d7720c&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Aguardo mensagens de vocês :)&lt;/p&gt;
&lt;p&gt;Para mais informações, acessem o site do pwnagotchi, que é &lt;a href=&#34;https://pwnagotchi.ai/&#34; class=&#34;uri&#34;&gt;https://pwnagotchi.ai/&lt;/a&gt;, onde você consegue aprender sobre a instalação, configuração, e uso. Para dúvidas, é possível acessar a &lt;a href=&#34;https://community.pwnagotchi.ai/&#34;&gt;comunidade&lt;/a&gt; e o &lt;a href=&#34;https://www.reddit.com/r/pwnagotchi/&#34;&gt;sub-reddit&lt;/a&gt;. No próximo post, aprenderemos a mexer em APIs no R utilizando a API da PwnGrid!&lt;/p&gt;
&lt;p&gt;Bom, por hoje é só! Vimos um interessante exemplo de inteligência artificial aplicada à segurança de redes, mostrando todo o potencial que a ciência de dados pode exercer no mundo, em todas as áreas. Qualquer dúvida, correção ou sugestão pode ser enviada para o meu email &lt;a href=&#34;mailto:matheus.pestana@iesp.uerj.br&#34; class=&#34;email&#34;&gt;matheus.pestana@iesp.uerj.br&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
