<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pentesting | Mateus C. Pestana</title>
    <link>https://mateuspestana.github.io/tag/pentesting/</link>
      <atom:link href="https://mateuspestana.github.io/tag/pentesting/index.xml" rel="self" type="application/rss+xml" />
    <description>pentesting</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>pt</language><copyright>© 2021 Matheus C. Pestana</copyright><lastBuildDate>Sat, 07 Dec 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://mateuspestana.github.io/media/icon_huae0488878dbc9b7066571374604548ea_453288_512x512_fill_lanczos_center_2.png</url>
      <title>pentesting</title>
      <link>https://mateuspestana.github.io/tag/pentesting/</link>
    </image>
    
    <item>
      <title>Requisições em APIs no R</title>
      <link>https://mateuspestana.github.io/post/req-apis/requisicoes-em-apis-no-r/</link>
      <pubDate>Sat, 07 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://mateuspestana.github.io/post/req-apis/requisicoes-em-apis-no-r/</guid>
      <description>
&lt;script src=&#34;2019-12-07-requisições-em-apis-no-r_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;No post passado, eu falei sobre &lt;a href=&#34;https://mateuspestana.github.io/post/pwnagotchi-seguranca-de-redes-e-inteligencia-artificial/&#34;&gt;segurança de redes e inteligência artificial&lt;/a&gt; usando o &lt;a href=&#34;https://pwnagotchi.ai/&#34;&gt;Pwnagotchi&lt;/a&gt;. Se você não leu e se interessa por esses temas, recomendo que volte ao post para entender melhor sobre o que tratarei hoje. Se você só quiser saber sobre APIs no R, é só continuar lendo :).&lt;/p&gt;
&lt;p&gt;Bom, para começar, o que é uma &lt;strong&gt;API&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;Segundo o Wikipedia,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Interface de Programação de Aplicações (pt) ou Interface de Programação de Aplicação (pt-BR)), cujo acrônimo API provém do Inglês Application Programming Interface, é um conjunto de rotinas e padrões estabelecidos por um software para a utilização das suas funcionalidades por aplicativos que não pretendem envolver-se em detalhes da implementação do software, mas apenas usar seus serviços.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;De modo geral, a API é composta por uma série de funções acessíveis somente por programação, e que permitem utilizar características do software menos evidentes ao utilizador tradicional.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Em outras palavras, uma API é uma espécie de padrão estabelecido em um sistema, site ou aplicativo, pelo desenvolvedor, que permite o acesso facilitado a (pré-)determinadas funções. Por exemplo, algo muito utilizado na Ciência Política, que é minha área principal, são dados da Câmara dos Deputados. A Câmara dos Deputados possui uma API, que pode ser vista &lt;a href=&#34;https://dadosabertos.camara.leg.br/swagger/api.html&#34;&gt;aqui&lt;/a&gt; e que será assunto de um post futuramente. Essa API permite a visualização (e por sua vez, o processamento) de dados sobre parlamentares, incluindo gastos de gabinete, discursos, eventos, frentes parlamentares, partidos, proposições e tramitação de matérias.&lt;/p&gt;
&lt;p&gt;Se eu quisesse desenvolver um aplicativo que acompanhasse os gastos dos deputados, então, eu não precisaria construir um robô que raspa os dados do site da Câmara, os processa, e gera visualizações: eu poderia simplesmente fazer solicitações à API e teria esses dados disponibilizados e consolidados!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Então, como fazer isso no R?&lt;/em&gt; Para nosso exemplo, estarei usando a API do Pwnagotchi, a &lt;em&gt;Pwngrid&lt;/em&gt;, que é como se fosse um ranking com todos os usuários. Ou seja, como dito no post anterior, é um sistema que funciona como um &lt;em&gt;PokemonGo&lt;/em&gt; para redes WiFi. Na Pwngrid, que pode ser vista parcialmente &lt;a href=&#34;https://pwnagotchi.ai/map/&#34;&gt;aqui&lt;/a&gt;, temos todos os usuários com diversos dados sobre as suas últimas sessões: tempo de duração, quantos WiFi foram capturados, quantos &lt;em&gt;handshakes&lt;/em&gt;, de quais países são, e por quantos &lt;em&gt;epochs&lt;/em&gt;[^1] seu algoritmo treinou.&lt;/p&gt;
&lt;p&gt;No caso de APIs de sites, geralmente temos uma URL para fazer a solicitação. Se quiséssemos transferir algum dado pelo terminal do sistema (ou seja, fora do R), utilizaríamos o &lt;em&gt;cURL&lt;/em&gt;, que permite fazer esse tipo de requisição. Dentro do R, entretanto, utilizamos duas bibliotecas: o &lt;code&gt;httr&lt;/code&gt; e o &lt;code&gt;jsonlite&lt;/code&gt;. O primeiro, lida com as requisições, e o segundo nos permite tratar os dados (que vem em .json), permitindo transformar em um dataframe legível e inteligível pelo R.&lt;/p&gt;
&lt;p&gt;No caso da Pwngrid, cuja API está documentada &lt;a href=&#34;https://pwnagotchi.ai/api/&#34;&gt;aqui&lt;/a&gt;, o layout do endereço é:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://api.pwnagotchi.ai/api/v1/FUNCAO&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Sendo &lt;code&gt;/FUNCAO/&lt;/code&gt; a função/dado desejado estabelecido na API. Logo, se eu quisesse saber quantas unidades do &lt;em&gt;pwnagotchi&lt;/em&gt; existem por país, eu utilizaria a seguinte URL:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://api.pwnagotchi.ai/api/v1/units/by_country&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Se abrirmos essa URL no navegador do computador, teremos, no momento, o seguinte &lt;em&gt;output&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[{&amp;quot;country&amp;quot;:&amp;quot;US&amp;quot;,&amp;quot;units&amp;quot;:1205},{&amp;quot;country&amp;quot;:&amp;quot;DE&amp;quot;,&amp;quot;units&amp;quot;:394},{&amp;quot;country&amp;quot;:&amp;quot;FR&amp;quot;,&amp;quot;units&amp;quot;:215},
{&amp;quot;country&amp;quot;:&amp;quot;GB&amp;quot;,&amp;quot;units&amp;quot;:208},{&amp;quot;country&amp;quot;:&amp;quot;IT&amp;quot;,&amp;quot;units&amp;quot;:193},{&amp;quot;country&amp;quot;:&amp;quot;CA&amp;quot;,&amp;quot;units&amp;quot;:157},
{&amp;quot;country&amp;quot;:&amp;quot;NL&amp;quot;,&amp;quot;units&amp;quot;:110},{&amp;quot;country&amp;quot;:&amp;quot;AU&amp;quot;,&amp;quot;units&amp;quot;:99},{&amp;quot;country&amp;quot;:&amp;quot;ES&amp;quot;,&amp;quot;units&amp;quot;:74},
{&amp;quot;country&amp;quot;:&amp;quot;PL&amp;quot;,&amp;quot;units&amp;quot;:55},{&amp;quot;country&amp;quot;:&amp;quot;CH&amp;quot;,&amp;quot;units&amp;quot;:53},{&amp;quot;country&amp;quot;:&amp;quot;AT&amp;quot;,&amp;quot;units&amp;quot;:47},
{&amp;quot;country&amp;quot;:&amp;quot;RU&amp;quot;,&amp;quot;units&amp;quot;:39},{&amp;quot;country&amp;quot;:&amp;quot;SE&amp;quot;,&amp;quot;units&amp;quot;:35},{&amp;quot;country&amp;quot;:&amp;quot;BE&amp;quot;,&amp;quot;units&amp;quot;:35},
{&amp;quot;country&amp;quot;:&amp;quot;PT&amp;quot;,&amp;quot;units&amp;quot;:31},{&amp;quot;country&amp;quot;:&amp;quot;SG&amp;quot;,&amp;quot;units&amp;quot;:26},{&amp;quot;country&amp;quot;:&amp;quot;IE&amp;quot;,&amp;quot;units&amp;quot;:25},
{&amp;quot;country&amp;quot;:&amp;quot;BR&amp;quot;,&amp;quot;units&amp;quot;:24},{&amp;quot;country&amp;quot;:&amp;quot;CZ&amp;quot;,&amp;quot;units&amp;quot;:23},{&amp;quot;country&amp;quot;:&amp;quot;DK&amp;quot;,&amp;quot;units&amp;quot;:22},
{&amp;quot;country&amp;quot;:&amp;quot;ZA&amp;quot;,&amp;quot;units&amp;quot;:21},{&amp;quot;country&amp;quot;:&amp;quot;MX&amp;quot;,&amp;quot;units&amp;quot;:20},{&amp;quot;country&amp;quot;:&amp;quot;AR&amp;quot;,&amp;quot;units&amp;quot;:19},
{&amp;quot;country&amp;quot;:&amp;quot;TR&amp;quot;,&amp;quot;units&amp;quot;:16},{&amp;quot;country&amp;quot;:&amp;quot;JP&amp;quot;,&amp;quot;units&amp;quot;:15},{&amp;quot;country&amp;quot;:&amp;quot;SK&amp;quot;,&amp;quot;units&amp;quot;:14},
{&amp;quot;country&amp;quot;:&amp;quot;VN&amp;quot;,&amp;quot;units&amp;quot;:13},{&amp;quot;country&amp;quot;:&amp;quot;FI&amp;quot;,&amp;quot;units&amp;quot;:12},{&amp;quot;country&amp;quot;:&amp;quot;SI&amp;quot;,&amp;quot;units&amp;quot;:11},
{&amp;quot;country&amp;quot;:&amp;quot;BN&amp;quot;,&amp;quot;units&amp;quot;:10},{&amp;quot;country&amp;quot;:&amp;quot;NZ&amp;quot;,&amp;quot;units&amp;quot;:10},{&amp;quot;country&amp;quot;:&amp;quot;PH&amp;quot;,&amp;quot;units&amp;quot;:10},
{&amp;quot;country&amp;quot;:&amp;quot;MY&amp;quot;,&amp;quot;units&amp;quot;:10},{&amp;quot;country&amp;quot;:&amp;quot;IL&amp;quot;,&amp;quot;units&amp;quot;:9},{&amp;quot;country&amp;quot;:&amp;quot;IN&amp;quot;,&amp;quot;units&amp;quot;:9},
{&amp;quot;country&amp;quot;:&amp;quot;RO&amp;quot;,&amp;quot;units&amp;quot;:9},{&amp;quot;country&amp;quot;:&amp;quot;BG&amp;quot;,&amp;quot;units&amp;quot;:9},{&amp;quot;country&amp;quot;:&amp;quot;NO&amp;quot;,&amp;quot;units&amp;quot;:8},
{&amp;quot;country&amp;quot;:&amp;quot;CN&amp;quot;,&amp;quot;units&amp;quot;:8},{&amp;quot;country&amp;quot;:&amp;quot;GR&amp;quot;,&amp;quot;units&amp;quot;:8},{&amp;quot;country&amp;quot;:&amp;quot;HK&amp;quot;,&amp;quot;units&amp;quot;:7},
{&amp;quot;country&amp;quot;:&amp;quot;HU&amp;quot;,&amp;quot;units&amp;quot;:7},{&amp;quot;country&amp;quot;:&amp;quot;CY&amp;quot;,&amp;quot;units&amp;quot;:7},{&amp;quot;country&amp;quot;:&amp;quot;BY&amp;quot;,&amp;quot;units&amp;quot;:6},
{&amp;quot;country&amp;quot;:&amp;quot;LU&amp;quot;,&amp;quot;units&amp;quot;:6},{&amp;quot;country&amp;quot;:&amp;quot;LT&amp;quot;,&amp;quot;units&amp;quot;:5},{&amp;quot;country&amp;quot;:&amp;quot;CL&amp;quot;,&amp;quot;units&amp;quot;:5},
{&amp;quot;country&amp;quot;:&amp;quot;CO&amp;quot;,&amp;quot;units&amp;quot;:5},{&amp;quot;country&amp;quot;:&amp;quot;UA&amp;quot;,&amp;quot;units&amp;quot;:5},{&amp;quot;country&amp;quot;:&amp;quot;UY&amp;quot;,&amp;quot;units&amp;quot;:4},
{&amp;quot;country&amp;quot;:&amp;quot;AE&amp;quot;,&amp;quot;units&amp;quot;:4},{&amp;quot;country&amp;quot;:&amp;quot;DZ&amp;quot;,&amp;quot;units&amp;quot;:4},{&amp;quot;country&amp;quot;:&amp;quot;EE&amp;quot;,&amp;quot;units&amp;quot;:4},
{&amp;quot;country&amp;quot;:&amp;quot;IS&amp;quot;,&amp;quot;units&amp;quot;:4},{&amp;quot;country&amp;quot;:&amp;quot;TW&amp;quot;,&amp;quot;units&amp;quot;:4},{&amp;quot;country&amp;quot;:&amp;quot;EC&amp;quot;,&amp;quot;units&amp;quot;:3},
{&amp;quot;country&amp;quot;:&amp;quot;LV&amp;quot;,&amp;quot;units&amp;quot;:3},{&amp;quot;country&amp;quot;:&amp;quot;TH&amp;quot;,&amp;quot;units&amp;quot;:3},{&amp;quot;country&amp;quot;:&amp;quot;HR&amp;quot;,&amp;quot;units&amp;quot;:2},
{&amp;quot;country&amp;quot;:&amp;quot;LB&amp;quot;,&amp;quot;units&amp;quot;:2},{&amp;quot;country&amp;quot;:&amp;quot;AF&amp;quot;,&amp;quot;units&amp;quot;:2},{&amp;quot;country&amp;quot;:&amp;quot;SV&amp;quot;,&amp;quot;units&amp;quot;:2},
{&amp;quot;country&amp;quot;:&amp;quot;JO&amp;quot;,&amp;quot;units&amp;quot;:2},{&amp;quot;country&amp;quot;:&amp;quot;CR&amp;quot;,&amp;quot;units&amp;quot;:2},{&amp;quot;country&amp;quot;:&amp;quot;SA&amp;quot;,&amp;quot;units&amp;quot;:1},
{&amp;quot;country&amp;quot;:&amp;quot;KW&amp;quot;,&amp;quot;units&amp;quot;:1},{&amp;quot;country&amp;quot;:&amp;quot;XX&amp;quot;,&amp;quot;units&amp;quot;:1},{&amp;quot;country&amp;quot;:&amp;quot;PA&amp;quot;,&amp;quot;units&amp;quot;:1},
{&amp;quot;country&amp;quot;:&amp;quot;PK&amp;quot;,&amp;quot;units&amp;quot;:1},{&amp;quot;country&amp;quot;:&amp;quot;MA&amp;quot;,&amp;quot;units&amp;quot;:1},{&amp;quot;country&amp;quot;:&amp;quot;MK&amp;quot;,&amp;quot;units&amp;quot;:1},
{&amp;quot;country&amp;quot;:&amp;quot;BA&amp;quot;,&amp;quot;units&amp;quot;:1},{&amp;quot;country&amp;quot;:&amp;quot;QA&amp;quot;,&amp;quot;units&amp;quot;:1},{&amp;quot;country&amp;quot;:&amp;quot;NI&amp;quot;,&amp;quot;units&amp;quot;:1},
{&amp;quot;country&amp;quot;:&amp;quot;BL&amp;quot;,&amp;quot;units&amp;quot;:1},{&amp;quot;country&amp;quot;:&amp;quot;KR&amp;quot;,&amp;quot;units&amp;quot;:1}]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esse bloco de código acima é uma lista com duas chaves/variáveis, onde cada observação está dentro de “{ }”, e as variáveis estão seapradas por vírgula, sendo elas &lt;code&gt;country&lt;/code&gt; e &lt;code&gt;units&lt;/code&gt;: o país e o número de unidades &lt;em&gt;pwnagotchi&lt;/em&gt; em cada um deles. Temos, no caso do Brasil (BR), o seguinte:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{&#34;country&#34;:&#34;BR&#34;,&#34;units&#34;:24}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Isso indica que no país BR temos 24 pwnagotchis.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Ok! Entendi! Mas como fazer isso no R, gerando bancos de dados prontos para serem utilizados?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;No R, ao carregarmos as bibliotecas necessárias (como sempre, o &lt;em&gt;tidyverse&lt;/em&gt; incluído), definimos a URL para qual a requisição será feita, processamos essa URL com base no GET (o tipo de requisição, que pode ser GET ou POST), extraímos o conteúdo, convertemos em JSON e, dali, adaptamos a um banco. A teoria parece mais complicada que a prática, então vamos botar a mão na massa para entender melhor:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pacman::p_load(tidyverse, httr, jsonlite, hrbrthemes, ggthemes)

# Definimos a URL
url_paises &amp;lt;- &amp;quot;https://api.pwnagotchi.ai/api/v1/units/by_country&amp;quot; 

# Solicitamos a mesma
GET_paises &amp;lt;- GET(url_paises)

# Extraímos o conteúdo
content_paises &amp;lt;- content(GET_paises, &amp;quot;text&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## No encoding supplied: defaulting to UTF-8.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Convertemos de JSON
paises_df &amp;lt;- fromJSON(content_paises)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora, temos um objeto chamado &lt;code&gt;paises_df&lt;/code&gt; que pode ser inspecionado, sumarizado e trabalhado como um banco qualquer no R. Se lembrarmos bem, no output dado pelo navegador, tínhamos duas variáveis: &lt;code&gt;country&lt;/code&gt; e &lt;code&gt;units&lt;/code&gt;. Será que as mesmas são encontradas no banco gerado?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;glimpse(paises_df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 99
## Columns: 2
## $ country &amp;lt;chr&amp;gt; &amp;quot;US&amp;quot;, &amp;quot;DE&amp;quot;, &amp;quot;GB&amp;quot;, &amp;quot;FR&amp;quot;, &amp;quot;IT&amp;quot;, &amp;quot;CA&amp;quot;, &amp;quot;NL&amp;quot;, &amp;quot;AU&amp;quot;, &amp;quot;ES&amp;quot;, &amp;quot;RU&amp;quot;, &amp;quot;P…
## $ units   &amp;lt;int&amp;gt; 3727, 1287, 720, 519, 498, 433, 385, 342, 238, 216, 191, 167, …&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para mostrar que o objeto pode ser trabalhado como qualquer outro objeto nativo, façamos um gráfico dos 10 países com maior número de unidades:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;paises_df %&amp;gt;% 
  top_n(10, units) %&amp;gt;% 
  ggplot(aes(x = reorder(country, units), y = units, fill = country))+
  geom_col(show.legend = F)+
  labs(x = &amp;quot;País&amp;quot;, y = &amp;quot;Nº de unidades&amp;quot;, 
       title = &amp;quot;PwnGrid&amp;quot;, subtitle = &amp;quot;Número de unidades por país&amp;quot;)+
  coord_flip()+
  theme_ipsum_tw()+
  scale_fill_gdocs()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://mateuspestana.github.io/post/req-apis/2019-12-07-requisic%CC%A7o%CC%83es-em-apis-no-r_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Percebe-se que os Estados Unidos são o país que mais possuem unidades registradas!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Ok! Entendi como se faz requisição de API no R. Mas e se a API tiver muitas páginas?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Esse exemplo é visto também na Pwngrid. Se observarmos a &lt;a href=&#34;https://pwnagotchi.ai/api/grid/#get-api-v1-units&#34;&gt;documentação&lt;/a&gt;, vemos que se quisermos todas as unidades, temos um novo argumento na URL, que é &lt;code&gt;?p=2&lt;/code&gt;, no caso da segunda página. Como baixar todas as páginas? Como descobrir quais são todas as páginas?&lt;/p&gt;
&lt;p&gt;Bom, a solução é simples. O R (e toda linguagem de programação) possui um recurso chamado &lt;strong&gt;for&lt;/strong&gt;, que permite faze &lt;em&gt;loops&lt;/em&gt;, ou seja, trabalhar recursivamente até determinado ponto. A sintaxe de um &lt;strong&gt;for&lt;/strong&gt; funciona da seguinte maneira:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for(i in n){
  faça_algo(baseado_em = i)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se quiséssemos printar algo de maneira recursiva no R, faríamos da seguinte forma:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;elec_pres &amp;lt;- seq(1994, 2018, 4)
for(ano in elec_pres){
  print(paste(&amp;quot;Em&amp;quot;, ano, &amp;quot;houve uma eleição presidencial no Brasil&amp;quot;))
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Em 1994 houve uma eleição presidencial no Brasil&amp;quot;
## [1] &amp;quot;Em 1998 houve uma eleição presidencial no Brasil&amp;quot;
## [1] &amp;quot;Em 2002 houve uma eleição presidencial no Brasil&amp;quot;
## [1] &amp;quot;Em 2006 houve uma eleição presidencial no Brasil&amp;quot;
## [1] &amp;quot;Em 2010 houve uma eleição presidencial no Brasil&amp;quot;
## [1] &amp;quot;Em 2014 houve uma eleição presidencial no Brasil&amp;quot;
## [1] &amp;quot;Em 2018 houve uma eleição presidencial no Brasil&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O &lt;code&gt;for&lt;/code&gt; acima fez um loop que repetiu a mesma frase para cada item do vetor &lt;code&gt;elec_pres&lt;/code&gt;, que eu denominei &lt;code&gt;ano&lt;/code&gt;. Entenderam?&lt;/p&gt;
&lt;p&gt;O princípio de baixar muitas páginas de uma só vez em uma API é o mesmo. Abaixo, minha saída para tal problema:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;baixa_pwngrid &amp;lt;- function(z = npages) {
  pages &amp;lt;- list()
  base &amp;lt;- &amp;quot;https://api.pwnagotchi.ai/api/v1/units&amp;quot;
  pagesfun &amp;lt;- function(x = 1) {
    if (x == 1) {
      return()
    }
    else{
      paste0(&amp;quot;?p=&amp;quot;, x)
    }
  }
  unit1 &amp;lt;- fromJSON(content(GET(paste0(base, pagesfun(1))),
                            &amp;quot;text&amp;quot;),
                    flatten = T)
  npages &amp;lt;- unit1$pages
  for(i in 0:z){
    json &amp;lt;- fromJSON(paste0(base, pagesfun(i)))
    message(&amp;quot;Requisitando página &amp;quot;, i)
    pages[[i+1]] &amp;lt;- json$units
    units_df &amp;lt;- rbind_pages(pages)
  }
  return(units_df)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Explicando o comando acima: como eu frequentemente solicito esses dados da Pwngrid à API, desenvolvi uma função, chamada &lt;code&gt;baixa_pwngrid()&lt;/code&gt; que faz o seguinte:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cria um objeto denominado &lt;code&gt;pages&lt;/code&gt;, vazio, determinando que é uma lista;&lt;/li&gt;
&lt;li&gt;Cria um objeto chamado &lt;code&gt;base&lt;/code&gt;, que contém a URL que será requisitada;&lt;/li&gt;
&lt;li&gt;Cria uma subfunção chamada &lt;code&gt;pagesfun&lt;/code&gt;, que itera as páginas com o argumento extra, &lt;code&gt;?p=&lt;/code&gt; para cada página;&lt;/li&gt;
&lt;li&gt;Baixa, extrai e converte para um objeto denominado &lt;code&gt;unit1&lt;/code&gt; a primeira página. Baixar a primeira página é importante pois, nesse caso especificamente, ela contém uma variável que determina quantas páginas são encontradas no total;&lt;/li&gt;
&lt;li&gt;Cria o objeto &lt;code&gt;npages&lt;/code&gt;, que possui como valor o total de páginas, visto em &lt;code&gt;unit1&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Crio um loop para cada página presente em &lt;code&gt;npages&lt;/code&gt;, printando no terminal em qual página estou, e direcionando tudo para um objeto, chamado &lt;code&gt;units_df&lt;/code&gt;. Todas as páginas são unidas pela função &lt;code&gt;rbind_pages&lt;/code&gt;, que serve para isso.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para fins de teste, vamos inspecionar o banco e criar um gráfico com as unidades ativas do EUA que possuem pelo menos uma rede capturada:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# units_df &amp;lt;- baixa_pwngrid() 
glimpse(units_df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 525
## Columns: 8
## $ enrolled_at &amp;lt;chr&amp;gt; &amp;quot;2021-03-02T23:09:13Z&amp;quot;, &amp;quot;2021-03-02T22:17:15Z&amp;quot;, &amp;quot;2021-03-0…
## $ updated_at  &amp;lt;chr&amp;gt; &amp;quot;2021-03-02T23:09:13Z&amp;quot;, &amp;quot;2021-03-02T23:19:20Z&amp;quot;, &amp;quot;2021-03-0…
## $ country     &amp;lt;chr&amp;gt; &amp;quot;US&amp;quot;, &amp;quot;US&amp;quot;, &amp;quot;CH&amp;quot;, &amp;quot;RU&amp;quot;, &amp;quot;CN&amp;quot;, &amp;quot;DE&amp;quot;, &amp;quot;ZA&amp;quot;, &amp;quot;US&amp;quot;, &amp;quot;MX&amp;quot;, &amp;quot;GB&amp;quot;…
## $ name        &amp;lt;chr&amp;gt; &amp;quot;pwnacartman&amp;quot;, &amp;quot;Joshua&amp;quot;, &amp;quot;pwnagotchi&amp;quot;, &amp;quot;faradeika&amp;quot;, &amp;quot;Shire…
## $ fingerprint &amp;lt;chr&amp;gt; &amp;quot;5fd38e1fb8af1cbe1fbf6242b7d6907b9fe744de9e53484949bf90afe…
## $ public_key  &amp;lt;chr&amp;gt; &amp;quot;-----BEGIN RSA PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFA…
## $ data        &amp;lt;df[,5]&amp;gt; &amp;lt;data.frame[26 x 5]&amp;gt;
## $ networks    &amp;lt;int&amp;gt; 0, 0, 0, 233, 0, 0, 23, 0, 0, 0, 31, 48, 0, 0, 0, 1, 0,…&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;units_df %&amp;gt;%
  filter(country == &amp;quot;US&amp;quot; &amp;amp; networks &amp;gt; 0) %&amp;gt;%
  arrange(-networks) %&amp;gt;% 
  head(10) %&amp;gt;% 
  group_by(name) %&amp;gt;% 
  summarise(networks = sum(networks)) %&amp;gt;% 
  ggplot(aes(x = reorder(name, networks), y = networks, fill = name))+
  geom_col(show.legend = F)+
  labs(x = &amp;quot;Nome da unidade&amp;quot;, y = &amp;quot;Nº de redes&amp;quot;, 
       title = &amp;quot;PwnGrid US&amp;quot;, subtitle = &amp;quot;Número de redes capturadas por cada unidade&amp;quot;)+
  coord_flip()+
  theme_ipsum_tw()+
  scale_fill_gdocs()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://mateuspestana.github.io/post/req-apis/2019-12-07-requisic%CC%A7o%CC%83es-em-apis-no-r_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Legal, não? Toda e qualquer API que utilize esse formato pode ser buscada, tratada e processada no R, podendo então ser inserida em dashboards, shinyApps e muitos outros: as possibilidades são praticamente infinitas.&lt;/p&gt;
&lt;p&gt;Bom, por hoje é só! Qualquer dúvida, correção ou sugestão pode ser enviada para o meu email &lt;a href=&#34;mailto:matheus.pestana@iesp.uerj.br&#34; class=&#34;email&#34;&gt;matheus.pestana@iesp.uerj.br&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[^1] &lt;em&gt;Epochs&lt;/em&gt; são o tempo de exato um ciclo para o treinamento de um algoritmo. É uma medida extremamente variável. Em tese, quanto mais &lt;em&gt;epochs&lt;/em&gt; são utilizados no treinamento, melhor fica o nosso algoritmo.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pwnagotchi: segurança de redes e inteligência artificial</title>
      <link>https://mateuspestana.github.io/post/pwnagotchi/pwnagotchi-seguranca-de-redes-e-inteligencia-artificial/</link>
      <pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://mateuspestana.github.io/post/pwnagotchi/pwnagotchi-seguranca-de-redes-e-inteligencia-artificial/</guid>
      <description>
&lt;script src=&#34;2019-12-01-pwnagotchi-segurança-de-redes-e-inteligência-artificial_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Além da área de ciência de dados, um tema que eu gosto muito é o de &lt;em&gt;pentesting&lt;/em&gt;, abreviação de &lt;em&gt;penetration test&lt;/em&gt;, teste de penetração/intrusão, onde (legalmente) testamos sistemas para explorar suas falhas, comprovar fraquezas e então consertá-las. Em um mundo que é direcionado aos dados, a segurança dos mesmos é fundamental. Acompanho a área há alguns anos, mas por conta do mestrado, fiquei um pouco por fora.&lt;/p&gt;
&lt;p&gt;Felizmente, agora eu posso dizer que &lt;em&gt;pentesting&lt;/em&gt; não é mais tão fora dos meus estudos assim :)&lt;/p&gt;
&lt;p&gt;Conheci um projeto muito interessante chamado &lt;a href=&#34;https://pwnagotchi.ai/&#34;&gt;&lt;strong&gt;Pwnagotchi&lt;/strong&gt;&lt;/a&gt; que utiliza &lt;em&gt;reinforcement learning&lt;/em&gt;, um algoritmo de &lt;em&gt;machine learning&lt;/em&gt; (e que, de certa forma, podemos chamar de inteligência artificial) para capturar dados wifi e testar a segurança dessas redes, tudo isso utilizando um simples Raspberry Pi Zero W, como o da foto abaixo, que apesar de medir somente 6,5cm x 3 cm, é equipado com módulo Wifi, mini-HDMI, 512mb de RAM, bluetooth, 1 Ghz de CPU e conector de câmera, tudo isso funcionando com um cartão SD!
&lt;img src=&#34;https://www.raspberrypi.org/homepage-9df4b/static/9c6a7cd9c5f442d4279bd6862bef1657/bc3a8/72a529ca180136e5ab43dcf1547253238e273b8b_pi-zero-w-tilt-1-1620x1080.jpg&#34; alt=&#34;Fonte: raspberrypi.org&#34; /&gt;
Para um computador pessoal, o Raspberry PI Zero W pode deixar a desejar, mas para tarefas mais simples, como a que veremos hoje, ele funciona muito bem e possui um baixo preço (entre R$ 120,00 e R$ 200,00 ), rodando linux em versões próprias do kernel, que permitem a máxima potência disponível no produto.&lt;/p&gt;
&lt;div id=&#34;redes-wi-fi&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Redes Wi-Fi&lt;/h3&gt;
&lt;p&gt;Mas antes de falarmos do &lt;strong&gt;Pwnagotchi&lt;/strong&gt;, vamos falar sobre redes Wi-fi e entender qual o problema por trás delas. Redes sem-fio apresentam um sem número de falhas, que não são verdadeiros problemas das redes em si, mas que são descobertos dado o seu uso disseminado em praticamente todas as coisas atualmente (de routers pessoais à geladeiras e lâmpadas - IoT - &lt;em&gt;internet of things&lt;/em&gt;). Essa é quase um mandamento da informática: quanto mais fechado é um sistema e mais usado ele é, mais falhas serão descobertas nele. Com o Wi-Fi não é diferente.&lt;/p&gt;
&lt;p&gt;Alguns podem perguntar: &lt;em&gt;qual o problema de uma pessoa invadir a minha rede e utilizar a minha internet?&lt;/em&gt; Bom, quando sujeitamos nossas redes à outros, essas pessoas podem efetuar ataques à estabilidade da mesma, inserir grampos e filtrar dados (descobrindo senhas, sites visitados, etc), desviar o tráfego (te direcionando para um site malicioso com o intuito de roubar seus dados), dentre outras coisas. Por isso a força em uma senha é fundamental, ou seja, conter mais de 8 dígitos, misturar letras (maiúsculas e minúsculas), números e símbolos, não utilizar palavras prontas, mas uma mistura delas, são coisas fundamentais. Seres humanos não conseguem adivinhar senhas por tentativa-e-erro, mas computadores sim, e podem fazê-lo numa velocidade impressionante (com mais de 100 mil tentativas por segundo!).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;OK, mas como eles invadem meu Wi-Fi?&lt;/em&gt; Bom, a grosso modo, o Wi-Fi, por ser transmitido pelo ar, mesmo que tenha senha, alguns dados ficam abertos. Esses dados se referem à autenticação, ou seja, quando conectamos ao modem/router. Para conectarmos, ocorre um processo entre o computador e o router chamado &lt;em&gt;4-way handshake&lt;/em&gt; (no caso de redes que utilizam a chave WPA), um &lt;em&gt;“aperto de mão”&lt;/em&gt; entre as máquinas, que gera pacotes no ar, e esses pacotes, quando &lt;em&gt;sniffados&lt;/em&gt; (capturados), permitem que uma pessoa mal intencionada possa fazer testes de tentativa-e-erro para encontrar a senha. No caso de redes WEP, mais antigas, é mais fácil e rápido.&lt;/p&gt;
&lt;p&gt;Aí entra o papel da senha forte: para encontrar a senha, o hacker precisa de &lt;em&gt;wordlists&lt;/em&gt;, que são listas de palavras com possibilidades de senha. Ao tentar uma por uma, ao chegar na certa, a criptografia é quebrada e a senha se torna visível. Todavia, se a senha não estiver na &lt;em&gt;wordlist&lt;/em&gt;, isso nunca acontecerá, ou se for grande demais, pode até ser previsível, mas levaria anos para testar combinação por combinação.&lt;/p&gt;
&lt;p&gt;Para capturar os &lt;em&gt;handshakes&lt;/em&gt; (mais detalhes do funcionamento &lt;a href=&#34;https://www.wifi-professionals.com/2019/01/4-way-handshake&#34;&gt;aqui&lt;/a&gt;) e testar a vulnerabilidade da rede, um conjunto de ferramentas é utilizado, como o aircrack-ng, wireshark, bettercap, dentre outros, cuja utilização foge ao escopo do post (quem sabe um dia…). E essas ferramentas possuem um grande número de configurações que precisam ser testadas, iteradas e alteradas para que consigamos esses pacotes, como os canais monitorados (que precisam variar todo instante), o sinal do Wi-fi, o tempo de reconhecimento em cada canal, o tempo para saltar de um canal para outro, o número de associações que podemos fazer, quantas vezes podemos tentar reconectar com a rede antes de tentar uma outra, etc. Para quem fazia manualmente (como eu), era um trabalho hercúleo que exigia paciência e técnica, e às vezes simplesmente não funcionava (quando um dos dois faltavam, geralmente paciência). E é aí que entra o &lt;strong&gt;Pwnagotchi&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://www.wifi-professionals.com/wp-content/uploads/2019/01/4-WAY-handshake.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Fonte: Wifi-Professionals.com&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;pwnagotchi&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Pwnagotchi&lt;/h3&gt;
&lt;p&gt;O Pwnagotchi utiliza um algoritmo chamado A2C (&lt;em&gt;Advantage-Actor-Critic&lt;/em&gt;), que é uma espécie de algoritmos de &lt;em&gt;reinforcement learning&lt;/em&gt;, fazendo parte do que é comumente (e muitas vezes, erroneamente) chamado de Inteligência Artificial. O que o A2C faz? De modo simples, ele (o ator) executa ações em busca de recompensas, tendo um valor esperado de recompensas, então a outra parte (o crítico) mensura, dentre aquelas ações, quais geraram mais recompensas, e essas passarão a ser mais utilizadas (ou utilizadas primeiro) para que a recompensa seja maximizada. Em um famoso exemplo, o algoritmo programado aprende a jogar &lt;em&gt;Sonic the Hedgehog&lt;/em&gt; e consegue passar todas as fases : &lt;a href=&#34;https://www.youtube.com/watch?v=GCfUdkCL7FQ&#34; class=&#34;uri&#34;&gt;https://www.youtube.com/watch?v=GCfUdkCL7FQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;O que está acontecendo? Ao algoritmo, é dado o jogo (com suas fases, obstáculos, argolas, etc) e os comandos possíveis: avançar, voltar, pular, rolar. É ensinado também que existem argolas, que representam a recompensa para o algoritmo: quanto mais, melhor. Inicialmente, ele jogará de maneira quase que aleatória. Ao longo do tempo, ele vai percebendo que, em certos momentos, pular foi mais vantajoso que avançar, ou que rolar em determinada parte garantiu mais argolas, e guarda essas informações. Aos poucos, ele vai executando essas ações nos momentos certos para que sempre consiga o maior número possível de recompensas. Em algumas milhares de execuções (feitas em segundos/minutos pelo computador), o algoritmo já consegue jogar &lt;em&gt;Sonic&lt;/em&gt; com destreza.&lt;/p&gt;
&lt;p&gt;Para entender melhor o algoritmo A2C, recomendo o site &lt;a href=&#34;https://hackernoon.com/intuitive-rl-intro-to-advantage-actor-critic-a2c-4ff545978752&#34;&gt;hackernoon.com&lt;/a&gt;, que, com os quadrinhos (muito fofos, aliás!) do @&lt;a href=&#34;https://twitter.com/embermarke&#34;&gt;embermarke&lt;/a&gt;, permite uma compreensão melhor dos fundamentos do algoritmo.&lt;/p&gt;
&lt;p&gt;A mesma coisa é feita pelo Pwnagotchi: as configurações que citei anteriormente são as ações possíveis, e os handshakes são as recompensas. Com o uso, o aparelho executa um cálculo pra determinar o valor da recompensa em determinadas configurações, e busca sempre maximizá-lo, em tempo real. Ou seja, quanto mais você utiliza o Pwnagotchi, mais ele aprende e melhor consegue capturar os &lt;em&gt;handshakes&lt;/em&gt;, já que ele, de forma inteligente, consegue alterar as próprias configurações para aquele cenário.&lt;/p&gt;
&lt;p&gt;Para utilizá-lo, basta gravar a imagem, disponível &lt;a href=&#34;https://github.com/evilsocket/pwnagotchi/releases&#34;&gt;aqui&lt;/a&gt; em um cartão SD, alterar as configurações iniciais (como o nome do seu &lt;strong&gt;pwnagotchi&lt;/strong&gt;), inserí-lo no RaspberryPi Zero W, ligar em uma bateria (aqueles carregadores portáteis de celular são ótimos para isso!) e sair por aí, enquanto ele tenta capturar &lt;strong&gt;handshakes&lt;/strong&gt;. Algumas pessoas inserem telas e-ink (como a do Kindle ou do Lev) para que possam observar o trabalho do sistema em tempo real. A graça disso é que o desenvolvedor inseriu uma interface ultra amigável que aparece nessa tela, com pequenos rostinhos que indicam a atividade realizada, além de alguns outros dados. Esses rostinhoslembram muito um Tamagotchi, daí o nome: Pwnagotchi.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://media.giphy.com/media/f9GsXyfgEQbY65fnhu/source.gif&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Parece mesmo um Tamagotchi!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Para aqueles que, como eu, não desejam soldar uma tela e-ink no Pi, é possível acessar pela Web e ter uma ideia do que está acontecendo naquele momento. Além disso, o sistema também é acessado por SSH, permitindo alteração das configurações, download dos handshakes, atualizações, etc.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://mateuspestana.github.io/img/tela_pwnagotchi.jpeg&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Meu pwnagotchi, sendo exibido na tela do computador quando conectado no USB&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;O sistema suporta scripts que aprimoram a utilização do pwnagotchi, como por exemplo, registrar a localização GPS, fazer upload dos handshakes para plataformas de quebra de senhas, inserir temperatura, CPU e uso da memória na tela, fazer tethering pelo bluetooth, além de muitos outros.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mateuspestana.github.io/img/aberto_pwnagotchi.jpeg&#34; /&gt;
&lt;img src=&#34;https://mateuspestana.github.io/img/fechado_pwnagotchi.jpeg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Acima, minha montagem do Pwnagotchi, com o raspberry inserido em uma &lt;em&gt;case&lt;/em&gt; que imprimi em 3D, para proteger de poeira e contatos. Lembram que afirmei disse que era preciso escolher um nome para o seu pwnagotchi? O motivo por trás disso se chama PwnGrid, a rede de todos os Pwnagotchi (que você pode optar participar ou não). Nela, existe um rank de pwnagotchis, mostrando quantas redes você já “capturou”, por quanto tempo rodou e por quanto tempo seu algoritmo treinou! É como um &lt;em&gt;PokemonGo&lt;/em&gt; para redes wi-fi. O mapa da PwnGrid pode ser visto aqui &lt;a href=&#34;https://pwnagotchi.ai/map/&#34;&gt;https://pwnagotchi.ai/map/&lt;/a&gt;,&lt;/p&gt;
&lt;p&gt;A PwnGrid também é equipada com o PwnMail, um serviço de mensagens criptogradas e seguras pela internet, utilizando o dispositivo. Cada pwnagotchi tem sua própria chave pública, que permite o envio e recebimento de mensagens.&lt;/p&gt;
&lt;p&gt;Se alguém quiser me contatar por lá, minha chave é:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;873471cc5a10aa546947327da150bf0407a4d21fb091183cf3be2b2a19d7720c&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Aguardo mensagens de vocês :)&lt;/p&gt;
&lt;p&gt;Para mais informações, acessem o site do pwnagotchi, que é &lt;a href=&#34;https://pwnagotchi.ai/&#34; class=&#34;uri&#34;&gt;https://pwnagotchi.ai/&lt;/a&gt;, onde você consegue aprender sobre a instalação, configuração, e uso. Para dúvidas, é possível acessar a &lt;a href=&#34;https://community.pwnagotchi.ai/&#34;&gt;comunidade&lt;/a&gt; e o &lt;a href=&#34;https://www.reddit.com/r/pwnagotchi/&#34;&gt;sub-reddit&lt;/a&gt;. No próximo post, aprenderemos a mexer em APIs no R utilizando a API da PwnGrid!&lt;/p&gt;
&lt;p&gt;Bom, por hoje é só! Vimos um interessante exemplo de inteligência artificial aplicada à segurança de redes, mostrando todo o potencial que a ciência de dados pode exercer no mundo, em todas as áreas. Qualquer dúvida, correção ou sugestão pode ser enviada para o meu email &lt;a href=&#34;mailto:matheus.pestana@iesp.uerj.br&#34; class=&#34;email&#34;&gt;matheus.pestana@iesp.uerj.br&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
