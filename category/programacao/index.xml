<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programação | Mateus C. Pestana</title>
    <link>https://mateuspestana.github.io/category/programacao/</link>
      <atom:link href="https://mateuspestana.github.io/category/programacao/index.xml" rel="self" type="application/rss+xml" />
    <description>programação</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>pt</language><copyright>© 2021 Matheus C. Pestana</copyright><lastBuildDate>Sat, 07 Dec 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://mateuspestana.github.io/media/icon_huae0488878dbc9b7066571374604548ea_453288_512x512_fill_lanczos_center_2.png</url>
      <title>programação</title>
      <link>https://mateuspestana.github.io/category/programacao/</link>
    </image>
    
    <item>
      <title>Requisições em APIs no R</title>
      <link>https://mateuspestana.github.io/post/req-apis/requisicoes-em-apis-no-r/</link>
      <pubDate>Sat, 07 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://mateuspestana.github.io/post/req-apis/requisicoes-em-apis-no-r/</guid>
      <description>
&lt;script src=&#34;2019-12-07-requisições-em-apis-no-r_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;No post passado, eu falei sobre &lt;a href=&#34;https://mateuspestana.github.io/post/pwnagotchi-seguranca-de-redes-e-inteligencia-artificial/&#34;&gt;segurança de redes e inteligência artificial&lt;/a&gt; usando o &lt;a href=&#34;https://pwnagotchi.ai/&#34;&gt;Pwnagotchi&lt;/a&gt;. Se você não leu e se interessa por esses temas, recomendo que volte ao post para entender melhor sobre o que tratarei hoje. Se você só quiser saber sobre APIs no R, é só continuar lendo :).&lt;/p&gt;
&lt;p&gt;Bom, para começar, o que é uma &lt;strong&gt;API&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;Segundo o Wikipedia,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Interface de Programação de Aplicações (pt) ou Interface de Programação de Aplicação (pt-BR)), cujo acrônimo API provém do Inglês Application Programming Interface, é um conjunto de rotinas e padrões estabelecidos por um software para a utilização das suas funcionalidades por aplicativos que não pretendem envolver-se em detalhes da implementação do software, mas apenas usar seus serviços.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;De modo geral, a API é composta por uma série de funções acessíveis somente por programação, e que permitem utilizar características do software menos evidentes ao utilizador tradicional.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Em outras palavras, uma API é uma espécie de padrão estabelecido em um sistema, site ou aplicativo, pelo desenvolvedor, que permite o acesso facilitado a (pré-)determinadas funções. Por exemplo, algo muito utilizado na Ciência Política, que é minha área principal, são dados da Câmara dos Deputados. A Câmara dos Deputados possui uma API, que pode ser vista &lt;a href=&#34;https://dadosabertos.camara.leg.br/swagger/api.html&#34;&gt;aqui&lt;/a&gt; e que será assunto de um post futuramente. Essa API permite a visualização (e por sua vez, o processamento) de dados sobre parlamentares, incluindo gastos de gabinete, discursos, eventos, frentes parlamentares, partidos, proposições e tramitação de matérias.&lt;/p&gt;
&lt;p&gt;Se eu quisesse desenvolver um aplicativo que acompanhasse os gastos dos deputados, então, eu não precisaria construir um robô que raspa os dados do site da Câmara, os processa, e gera visualizações: eu poderia simplesmente fazer solicitações à API e teria esses dados disponibilizados e consolidados!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Então, como fazer isso no R?&lt;/em&gt; Para nosso exemplo, estarei usando a API do Pwnagotchi, a &lt;em&gt;Pwngrid&lt;/em&gt;, que é como se fosse um ranking com todos os usuários. Ou seja, como dito no post anterior, é um sistema que funciona como um &lt;em&gt;PokemonGo&lt;/em&gt; para redes WiFi. Na Pwngrid, que pode ser vista parcialmente &lt;a href=&#34;https://pwnagotchi.ai/map/&#34;&gt;aqui&lt;/a&gt;, temos todos os usuários com diversos dados sobre as suas últimas sessões: tempo de duração, quantos WiFi foram capturados, quantos &lt;em&gt;handshakes&lt;/em&gt;, de quais países são, e por quantos &lt;em&gt;epochs&lt;/em&gt;[^1] seu algoritmo treinou.&lt;/p&gt;
&lt;p&gt;No caso de APIs de sites, geralmente temos uma URL para fazer a solicitação. Se quiséssemos transferir algum dado pelo terminal do sistema (ou seja, fora do R), utilizaríamos o &lt;em&gt;cURL&lt;/em&gt;, que permite fazer esse tipo de requisição. Dentro do R, entretanto, utilizamos duas bibliotecas: o &lt;code&gt;httr&lt;/code&gt; e o &lt;code&gt;jsonlite&lt;/code&gt;. O primeiro, lida com as requisições, e o segundo nos permite tratar os dados (que vem em .json), permitindo transformar em um dataframe legível e inteligível pelo R.&lt;/p&gt;
&lt;p&gt;No caso da Pwngrid, cuja API está documentada &lt;a href=&#34;https://pwnagotchi.ai/api/&#34;&gt;aqui&lt;/a&gt;, o layout do endereço é:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://api.pwnagotchi.ai/api/v1/FUNCAO&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Sendo &lt;code&gt;/FUNCAO/&lt;/code&gt; a função/dado desejado estabelecido na API. Logo, se eu quisesse saber quantas unidades do &lt;em&gt;pwnagotchi&lt;/em&gt; existem por país, eu utilizaria a seguinte URL:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://api.pwnagotchi.ai/api/v1/units/by_country&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Se abrirmos essa URL no navegador do computador, teremos, no momento, o seguinte &lt;em&gt;output&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[{&amp;quot;country&amp;quot;:&amp;quot;US&amp;quot;,&amp;quot;units&amp;quot;:1205},{&amp;quot;country&amp;quot;:&amp;quot;DE&amp;quot;,&amp;quot;units&amp;quot;:394},{&amp;quot;country&amp;quot;:&amp;quot;FR&amp;quot;,&amp;quot;units&amp;quot;:215},
{&amp;quot;country&amp;quot;:&amp;quot;GB&amp;quot;,&amp;quot;units&amp;quot;:208},{&amp;quot;country&amp;quot;:&amp;quot;IT&amp;quot;,&amp;quot;units&amp;quot;:193},{&amp;quot;country&amp;quot;:&amp;quot;CA&amp;quot;,&amp;quot;units&amp;quot;:157},
{&amp;quot;country&amp;quot;:&amp;quot;NL&amp;quot;,&amp;quot;units&amp;quot;:110},{&amp;quot;country&amp;quot;:&amp;quot;AU&amp;quot;,&amp;quot;units&amp;quot;:99},{&amp;quot;country&amp;quot;:&amp;quot;ES&amp;quot;,&amp;quot;units&amp;quot;:74},
{&amp;quot;country&amp;quot;:&amp;quot;PL&amp;quot;,&amp;quot;units&amp;quot;:55},{&amp;quot;country&amp;quot;:&amp;quot;CH&amp;quot;,&amp;quot;units&amp;quot;:53},{&amp;quot;country&amp;quot;:&amp;quot;AT&amp;quot;,&amp;quot;units&amp;quot;:47},
{&amp;quot;country&amp;quot;:&amp;quot;RU&amp;quot;,&amp;quot;units&amp;quot;:39},{&amp;quot;country&amp;quot;:&amp;quot;SE&amp;quot;,&amp;quot;units&amp;quot;:35},{&amp;quot;country&amp;quot;:&amp;quot;BE&amp;quot;,&amp;quot;units&amp;quot;:35},
{&amp;quot;country&amp;quot;:&amp;quot;PT&amp;quot;,&amp;quot;units&amp;quot;:31},{&amp;quot;country&amp;quot;:&amp;quot;SG&amp;quot;,&amp;quot;units&amp;quot;:26},{&amp;quot;country&amp;quot;:&amp;quot;IE&amp;quot;,&amp;quot;units&amp;quot;:25},
{&amp;quot;country&amp;quot;:&amp;quot;BR&amp;quot;,&amp;quot;units&amp;quot;:24},{&amp;quot;country&amp;quot;:&amp;quot;CZ&amp;quot;,&amp;quot;units&amp;quot;:23},{&amp;quot;country&amp;quot;:&amp;quot;DK&amp;quot;,&amp;quot;units&amp;quot;:22},
{&amp;quot;country&amp;quot;:&amp;quot;ZA&amp;quot;,&amp;quot;units&amp;quot;:21},{&amp;quot;country&amp;quot;:&amp;quot;MX&amp;quot;,&amp;quot;units&amp;quot;:20},{&amp;quot;country&amp;quot;:&amp;quot;AR&amp;quot;,&amp;quot;units&amp;quot;:19},
{&amp;quot;country&amp;quot;:&amp;quot;TR&amp;quot;,&amp;quot;units&amp;quot;:16},{&amp;quot;country&amp;quot;:&amp;quot;JP&amp;quot;,&amp;quot;units&amp;quot;:15},{&amp;quot;country&amp;quot;:&amp;quot;SK&amp;quot;,&amp;quot;units&amp;quot;:14},
{&amp;quot;country&amp;quot;:&amp;quot;VN&amp;quot;,&amp;quot;units&amp;quot;:13},{&amp;quot;country&amp;quot;:&amp;quot;FI&amp;quot;,&amp;quot;units&amp;quot;:12},{&amp;quot;country&amp;quot;:&amp;quot;SI&amp;quot;,&amp;quot;units&amp;quot;:11},
{&amp;quot;country&amp;quot;:&amp;quot;BN&amp;quot;,&amp;quot;units&amp;quot;:10},{&amp;quot;country&amp;quot;:&amp;quot;NZ&amp;quot;,&amp;quot;units&amp;quot;:10},{&amp;quot;country&amp;quot;:&amp;quot;PH&amp;quot;,&amp;quot;units&amp;quot;:10},
{&amp;quot;country&amp;quot;:&amp;quot;MY&amp;quot;,&amp;quot;units&amp;quot;:10},{&amp;quot;country&amp;quot;:&amp;quot;IL&amp;quot;,&amp;quot;units&amp;quot;:9},{&amp;quot;country&amp;quot;:&amp;quot;IN&amp;quot;,&amp;quot;units&amp;quot;:9},
{&amp;quot;country&amp;quot;:&amp;quot;RO&amp;quot;,&amp;quot;units&amp;quot;:9},{&amp;quot;country&amp;quot;:&amp;quot;BG&amp;quot;,&amp;quot;units&amp;quot;:9},{&amp;quot;country&amp;quot;:&amp;quot;NO&amp;quot;,&amp;quot;units&amp;quot;:8},
{&amp;quot;country&amp;quot;:&amp;quot;CN&amp;quot;,&amp;quot;units&amp;quot;:8},{&amp;quot;country&amp;quot;:&amp;quot;GR&amp;quot;,&amp;quot;units&amp;quot;:8},{&amp;quot;country&amp;quot;:&amp;quot;HK&amp;quot;,&amp;quot;units&amp;quot;:7},
{&amp;quot;country&amp;quot;:&amp;quot;HU&amp;quot;,&amp;quot;units&amp;quot;:7},{&amp;quot;country&amp;quot;:&amp;quot;CY&amp;quot;,&amp;quot;units&amp;quot;:7},{&amp;quot;country&amp;quot;:&amp;quot;BY&amp;quot;,&amp;quot;units&amp;quot;:6},
{&amp;quot;country&amp;quot;:&amp;quot;LU&amp;quot;,&amp;quot;units&amp;quot;:6},{&amp;quot;country&amp;quot;:&amp;quot;LT&amp;quot;,&amp;quot;units&amp;quot;:5},{&amp;quot;country&amp;quot;:&amp;quot;CL&amp;quot;,&amp;quot;units&amp;quot;:5},
{&amp;quot;country&amp;quot;:&amp;quot;CO&amp;quot;,&amp;quot;units&amp;quot;:5},{&amp;quot;country&amp;quot;:&amp;quot;UA&amp;quot;,&amp;quot;units&amp;quot;:5},{&amp;quot;country&amp;quot;:&amp;quot;UY&amp;quot;,&amp;quot;units&amp;quot;:4},
{&amp;quot;country&amp;quot;:&amp;quot;AE&amp;quot;,&amp;quot;units&amp;quot;:4},{&amp;quot;country&amp;quot;:&amp;quot;DZ&amp;quot;,&amp;quot;units&amp;quot;:4},{&amp;quot;country&amp;quot;:&amp;quot;EE&amp;quot;,&amp;quot;units&amp;quot;:4},
{&amp;quot;country&amp;quot;:&amp;quot;IS&amp;quot;,&amp;quot;units&amp;quot;:4},{&amp;quot;country&amp;quot;:&amp;quot;TW&amp;quot;,&amp;quot;units&amp;quot;:4},{&amp;quot;country&amp;quot;:&amp;quot;EC&amp;quot;,&amp;quot;units&amp;quot;:3},
{&amp;quot;country&amp;quot;:&amp;quot;LV&amp;quot;,&amp;quot;units&amp;quot;:3},{&amp;quot;country&amp;quot;:&amp;quot;TH&amp;quot;,&amp;quot;units&amp;quot;:3},{&amp;quot;country&amp;quot;:&amp;quot;HR&amp;quot;,&amp;quot;units&amp;quot;:2},
{&amp;quot;country&amp;quot;:&amp;quot;LB&amp;quot;,&amp;quot;units&amp;quot;:2},{&amp;quot;country&amp;quot;:&amp;quot;AF&amp;quot;,&amp;quot;units&amp;quot;:2},{&amp;quot;country&amp;quot;:&amp;quot;SV&amp;quot;,&amp;quot;units&amp;quot;:2},
{&amp;quot;country&amp;quot;:&amp;quot;JO&amp;quot;,&amp;quot;units&amp;quot;:2},{&amp;quot;country&amp;quot;:&amp;quot;CR&amp;quot;,&amp;quot;units&amp;quot;:2},{&amp;quot;country&amp;quot;:&amp;quot;SA&amp;quot;,&amp;quot;units&amp;quot;:1},
{&amp;quot;country&amp;quot;:&amp;quot;KW&amp;quot;,&amp;quot;units&amp;quot;:1},{&amp;quot;country&amp;quot;:&amp;quot;XX&amp;quot;,&amp;quot;units&amp;quot;:1},{&amp;quot;country&amp;quot;:&amp;quot;PA&amp;quot;,&amp;quot;units&amp;quot;:1},
{&amp;quot;country&amp;quot;:&amp;quot;PK&amp;quot;,&amp;quot;units&amp;quot;:1},{&amp;quot;country&amp;quot;:&amp;quot;MA&amp;quot;,&amp;quot;units&amp;quot;:1},{&amp;quot;country&amp;quot;:&amp;quot;MK&amp;quot;,&amp;quot;units&amp;quot;:1},
{&amp;quot;country&amp;quot;:&amp;quot;BA&amp;quot;,&amp;quot;units&amp;quot;:1},{&amp;quot;country&amp;quot;:&amp;quot;QA&amp;quot;,&amp;quot;units&amp;quot;:1},{&amp;quot;country&amp;quot;:&amp;quot;NI&amp;quot;,&amp;quot;units&amp;quot;:1},
{&amp;quot;country&amp;quot;:&amp;quot;BL&amp;quot;,&amp;quot;units&amp;quot;:1},{&amp;quot;country&amp;quot;:&amp;quot;KR&amp;quot;,&amp;quot;units&amp;quot;:1}]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esse bloco de código acima é uma lista com duas chaves/variáveis, onde cada observação está dentro de “{ }”, e as variáveis estão seapradas por vírgula, sendo elas &lt;code&gt;country&lt;/code&gt; e &lt;code&gt;units&lt;/code&gt;: o país e o número de unidades &lt;em&gt;pwnagotchi&lt;/em&gt; em cada um deles. Temos, no caso do Brasil (BR), o seguinte:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{&#34;country&#34;:&#34;BR&#34;,&#34;units&#34;:24}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Isso indica que no país BR temos 24 pwnagotchis.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Ok! Entendi! Mas como fazer isso no R, gerando bancos de dados prontos para serem utilizados?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;No R, ao carregarmos as bibliotecas necessárias (como sempre, o &lt;em&gt;tidyverse&lt;/em&gt; incluído), definimos a URL para qual a requisição será feita, processamos essa URL com base no GET (o tipo de requisição, que pode ser GET ou POST), extraímos o conteúdo, convertemos em JSON e, dali, adaptamos a um banco. A teoria parece mais complicada que a prática, então vamos botar a mão na massa para entender melhor:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pacman::p_load(tidyverse, httr, jsonlite, hrbrthemes, ggthemes)

# Definimos a URL
url_paises &amp;lt;- &amp;quot;https://api.pwnagotchi.ai/api/v1/units/by_country&amp;quot; 

# Solicitamos a mesma
GET_paises &amp;lt;- GET(url_paises)

# Extraímos o conteúdo
content_paises &amp;lt;- content(GET_paises, &amp;quot;text&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## No encoding supplied: defaulting to UTF-8.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Convertemos de JSON
paises_df &amp;lt;- fromJSON(content_paises)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora, temos um objeto chamado &lt;code&gt;paises_df&lt;/code&gt; que pode ser inspecionado, sumarizado e trabalhado como um banco qualquer no R. Se lembrarmos bem, no output dado pelo navegador, tínhamos duas variáveis: &lt;code&gt;country&lt;/code&gt; e &lt;code&gt;units&lt;/code&gt;. Será que as mesmas são encontradas no banco gerado?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;glimpse(paises_df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 99
## Columns: 2
## $ country &amp;lt;chr&amp;gt; &amp;quot;US&amp;quot;, &amp;quot;DE&amp;quot;, &amp;quot;GB&amp;quot;, &amp;quot;FR&amp;quot;, &amp;quot;IT&amp;quot;, &amp;quot;CA&amp;quot;, &amp;quot;NL&amp;quot;, &amp;quot;AU&amp;quot;, &amp;quot;ES&amp;quot;, &amp;quot;RU&amp;quot;, &amp;quot;P…
## $ units   &amp;lt;int&amp;gt; 3727, 1287, 720, 519, 498, 433, 385, 342, 238, 216, 191, 167, …&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para mostrar que o objeto pode ser trabalhado como qualquer outro objeto nativo, façamos um gráfico dos 10 países com maior número de unidades:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;paises_df %&amp;gt;% 
  top_n(10, units) %&amp;gt;% 
  ggplot(aes(x = reorder(country, units), y = units, fill = country))+
  geom_col(show.legend = F)+
  labs(x = &amp;quot;País&amp;quot;, y = &amp;quot;Nº de unidades&amp;quot;, 
       title = &amp;quot;PwnGrid&amp;quot;, subtitle = &amp;quot;Número de unidades por país&amp;quot;)+
  coord_flip()+
  theme_ipsum_tw()+
  scale_fill_gdocs()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://mateuspestana.github.io/post/req-apis/2019-12-07-requisic%CC%A7o%CC%83es-em-apis-no-r_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Percebe-se que os Estados Unidos são o país que mais possuem unidades registradas!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Ok! Entendi como se faz requisição de API no R. Mas e se a API tiver muitas páginas?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Esse exemplo é visto também na Pwngrid. Se observarmos a &lt;a href=&#34;https://pwnagotchi.ai/api/grid/#get-api-v1-units&#34;&gt;documentação&lt;/a&gt;, vemos que se quisermos todas as unidades, temos um novo argumento na URL, que é &lt;code&gt;?p=2&lt;/code&gt;, no caso da segunda página. Como baixar todas as páginas? Como descobrir quais são todas as páginas?&lt;/p&gt;
&lt;p&gt;Bom, a solução é simples. O R (e toda linguagem de programação) possui um recurso chamado &lt;strong&gt;for&lt;/strong&gt;, que permite faze &lt;em&gt;loops&lt;/em&gt;, ou seja, trabalhar recursivamente até determinado ponto. A sintaxe de um &lt;strong&gt;for&lt;/strong&gt; funciona da seguinte maneira:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for(i in n){
  faça_algo(baseado_em = i)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se quiséssemos printar algo de maneira recursiva no R, faríamos da seguinte forma:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;elec_pres &amp;lt;- seq(1994, 2018, 4)
for(ano in elec_pres){
  print(paste(&amp;quot;Em&amp;quot;, ano, &amp;quot;houve uma eleição presidencial no Brasil&amp;quot;))
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Em 1994 houve uma eleição presidencial no Brasil&amp;quot;
## [1] &amp;quot;Em 1998 houve uma eleição presidencial no Brasil&amp;quot;
## [1] &amp;quot;Em 2002 houve uma eleição presidencial no Brasil&amp;quot;
## [1] &amp;quot;Em 2006 houve uma eleição presidencial no Brasil&amp;quot;
## [1] &amp;quot;Em 2010 houve uma eleição presidencial no Brasil&amp;quot;
## [1] &amp;quot;Em 2014 houve uma eleição presidencial no Brasil&amp;quot;
## [1] &amp;quot;Em 2018 houve uma eleição presidencial no Brasil&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O &lt;code&gt;for&lt;/code&gt; acima fez um loop que repetiu a mesma frase para cada item do vetor &lt;code&gt;elec_pres&lt;/code&gt;, que eu denominei &lt;code&gt;ano&lt;/code&gt;. Entenderam?&lt;/p&gt;
&lt;p&gt;O princípio de baixar muitas páginas de uma só vez em uma API é o mesmo. Abaixo, minha saída para tal problema:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;baixa_pwngrid &amp;lt;- function(z = npages) {
  pages &amp;lt;- list()
  base &amp;lt;- &amp;quot;https://api.pwnagotchi.ai/api/v1/units&amp;quot;
  pagesfun &amp;lt;- function(x = 1) {
    if (x == 1) {
      return()
    }
    else{
      paste0(&amp;quot;?p=&amp;quot;, x)
    }
  }
  unit1 &amp;lt;- fromJSON(content(GET(paste0(base, pagesfun(1))),
                            &amp;quot;text&amp;quot;),
                    flatten = T)
  npages &amp;lt;- unit1$pages
  for(i in 0:z){
    json &amp;lt;- fromJSON(paste0(base, pagesfun(i)))
    message(&amp;quot;Requisitando página &amp;quot;, i)
    pages[[i+1]] &amp;lt;- json$units
    units_df &amp;lt;- rbind_pages(pages)
  }
  return(units_df)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Explicando o comando acima: como eu frequentemente solicito esses dados da Pwngrid à API, desenvolvi uma função, chamada &lt;code&gt;baixa_pwngrid()&lt;/code&gt; que faz o seguinte:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cria um objeto denominado &lt;code&gt;pages&lt;/code&gt;, vazio, determinando que é uma lista;&lt;/li&gt;
&lt;li&gt;Cria um objeto chamado &lt;code&gt;base&lt;/code&gt;, que contém a URL que será requisitada;&lt;/li&gt;
&lt;li&gt;Cria uma subfunção chamada &lt;code&gt;pagesfun&lt;/code&gt;, que itera as páginas com o argumento extra, &lt;code&gt;?p=&lt;/code&gt; para cada página;&lt;/li&gt;
&lt;li&gt;Baixa, extrai e converte para um objeto denominado &lt;code&gt;unit1&lt;/code&gt; a primeira página. Baixar a primeira página é importante pois, nesse caso especificamente, ela contém uma variável que determina quantas páginas são encontradas no total;&lt;/li&gt;
&lt;li&gt;Cria o objeto &lt;code&gt;npages&lt;/code&gt;, que possui como valor o total de páginas, visto em &lt;code&gt;unit1&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Crio um loop para cada página presente em &lt;code&gt;npages&lt;/code&gt;, printando no terminal em qual página estou, e direcionando tudo para um objeto, chamado &lt;code&gt;units_df&lt;/code&gt;. Todas as páginas são unidas pela função &lt;code&gt;rbind_pages&lt;/code&gt;, que serve para isso.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para fins de teste, vamos inspecionar o banco e criar um gráfico com as unidades ativas do EUA que possuem pelo menos uma rede capturada:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# units_df &amp;lt;- baixa_pwngrid() 
glimpse(units_df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 525
## Columns: 8
## $ enrolled_at &amp;lt;chr&amp;gt; &amp;quot;2021-03-02T23:09:13Z&amp;quot;, &amp;quot;2021-03-02T22:17:15Z&amp;quot;, &amp;quot;2021-03-0…
## $ updated_at  &amp;lt;chr&amp;gt; &amp;quot;2021-03-02T23:09:13Z&amp;quot;, &amp;quot;2021-03-02T23:19:20Z&amp;quot;, &amp;quot;2021-03-0…
## $ country     &amp;lt;chr&amp;gt; &amp;quot;US&amp;quot;, &amp;quot;US&amp;quot;, &amp;quot;CH&amp;quot;, &amp;quot;RU&amp;quot;, &amp;quot;CN&amp;quot;, &amp;quot;DE&amp;quot;, &amp;quot;ZA&amp;quot;, &amp;quot;US&amp;quot;, &amp;quot;MX&amp;quot;, &amp;quot;GB&amp;quot;…
## $ name        &amp;lt;chr&amp;gt; &amp;quot;pwnacartman&amp;quot;, &amp;quot;Joshua&amp;quot;, &amp;quot;pwnagotchi&amp;quot;, &amp;quot;faradeika&amp;quot;, &amp;quot;Shire…
## $ fingerprint &amp;lt;chr&amp;gt; &amp;quot;5fd38e1fb8af1cbe1fbf6242b7d6907b9fe744de9e53484949bf90afe…
## $ public_key  &amp;lt;chr&amp;gt; &amp;quot;-----BEGIN RSA PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFA…
## $ data        &amp;lt;df[,5]&amp;gt; &amp;lt;data.frame[26 x 5]&amp;gt;
## $ networks    &amp;lt;int&amp;gt; 0, 0, 0, 233, 0, 0, 23, 0, 0, 0, 31, 48, 0, 0, 0, 1, 0,…&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;units_df %&amp;gt;%
  filter(country == &amp;quot;US&amp;quot; &amp;amp; networks &amp;gt; 0) %&amp;gt;%
  arrange(-networks) %&amp;gt;% 
  head(10) %&amp;gt;% 
  group_by(name) %&amp;gt;% 
  summarise(networks = sum(networks)) %&amp;gt;% 
  ggplot(aes(x = reorder(name, networks), y = networks, fill = name))+
  geom_col(show.legend = F)+
  labs(x = &amp;quot;Nome da unidade&amp;quot;, y = &amp;quot;Nº de redes&amp;quot;, 
       title = &amp;quot;PwnGrid US&amp;quot;, subtitle = &amp;quot;Número de redes capturadas por cada unidade&amp;quot;)+
  coord_flip()+
  theme_ipsum_tw()+
  scale_fill_gdocs()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://mateuspestana.github.io/post/req-apis/2019-12-07-requisic%CC%A7o%CC%83es-em-apis-no-r_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Legal, não? Toda e qualquer API que utilize esse formato pode ser buscada, tratada e processada no R, podendo então ser inserida em dashboards, shinyApps e muitos outros: as possibilidades são praticamente infinitas.&lt;/p&gt;
&lt;p&gt;Bom, por hoje é só! Qualquer dúvida, correção ou sugestão pode ser enviada para o meu email &lt;a href=&#34;mailto:matheus.pestana@iesp.uerj.br&#34; class=&#34;email&#34;&gt;matheus.pestana@iesp.uerj.br&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[^1] &lt;em&gt;Epochs&lt;/em&gt; são o tempo de exato um ciclo para o treinamento de um algoritmo. É uma medida extremamente variável. Em tese, quanto mais &lt;em&gt;epochs&lt;/em&gt; são utilizados no treinamento, melhor fica o nosso algoritmo.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Imprimindo gráficos em 3D no R</title>
      <link>https://mateuspestana.github.io/post/imprimindo_graficos/imprimindo-graficos-em-3d-no-r/</link>
      <pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://mateuspestana.github.io/post/imprimindo_graficos/imprimindo-graficos-em-3d-no-r/</guid>
      <description>
&lt;script src=&#34;2019-11-15-imprimindo-gráficos-em-3d-no-r_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;a href=&#34;http://hadley.nz/&#34;&gt;Hadley Wickham&lt;/a&gt;, um dos mantenedores do RStudio e criador do pacote &lt;code&gt;tidyverse&lt;/code&gt; (que engloba outros, como &lt;code&gt;dplyr&lt;/code&gt;, &lt;code&gt;ggplot&lt;/code&gt;, &lt;code&gt;forcats&lt;/code&gt;, &lt;code&gt;purrr&lt;/code&gt;, etc), escreveu um excelente livro com &lt;a href=&#34;https://twitter.com/statgarrett?lang=pt&#34;&gt;Garret Grolemund&lt;/a&gt; chamado “R for Data Science”, que pode ser encontrado gratuitamente &lt;a href=&#34;https://r4ds.had.co.nz/&#34;&gt;aqui&lt;/a&gt;. Recomendo fortemente, pois a didática é excelente, os exemplos são claros e os exercícios são desafiadores. Um fato curioso sobr o livro é que o mesmo ensina a fazer gráficos (com o &lt;code&gt;ggplot&lt;/code&gt;) &lt;strong&gt;antes&lt;/strong&gt; de ensinar todas as outras coisas, como funções, objetos, tratamento de bancos, análise exploratória e modelos.&lt;/p&gt;
&lt;p&gt;O motivo para isso é simples: gráficos são importantíssimos pois é através deles que transmitimos informações aos que nos lêem e nos assistem. No livro, o capítulo de gráficos começa com a seguinte frase:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“O gráfico simples trouxe mais informação para a mente do analista de dados do que qualquer outro dispositivo” &lt;br&gt;
— John Tukey&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Quanto mais claro o gráfico, mais fácil é de sermos entendidos, e isso é um princípio da ciência: se construímos algo de difícil compreensão, ninguém entende; se ninguém entende, ninguém dialoga; se ninguém dialoga, não há ciência.&lt;/p&gt;
&lt;p&gt;Entretanto, gráficos são apelos visuais. Gráficos são dados exibidos em um plano, com diversas informações numéricas representadas, que possibilitam comparações dentro daquele plano. Cada eixo de um gráfico é uma dimensão, ou seja, guardam uma escala ou informação. Outras dimensões podem existir em um mesmo gráfico. Em um gráfico de dispersão, por exemplo, o tamanho de cada ponto pode significar um terceiro dado, assim como a cor, podendo representar grupos ou casos similares.&lt;/p&gt;
&lt;p&gt;Um claro exemplo é o abaixo: um gráfico de hexágonos, feito a partir dos dados das 96.871 seções eleitorais da Rússia, nas eleições para o legislativo em 2016. No eixo X, temos o comparecimento, em porcentagem; no eixo Y, a porcentagem de votos no partido Rússia Unida, que possui maioria absoluta na &lt;em&gt;Duma&lt;/em&gt; (o parlamento russo), e a cor representa o número de seções naquele caso, indo de de um roxo escuro, que indica poucas seções, a um amarelo claro, indicando muitas.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pacman::p_load(tidyverse, rayshader, hrbrthemes, viridis, hexbin)

duma2016 %&amp;gt;%
  mutate(pct_edinayarossiya = p_edinayarossiya/(ncedval + ncedinval),
         compa = (ncedval+ncedinval)/nelelist) %&amp;gt;%
  ggplot(aes(x = compa, y = pct_edinayarossiya))+
  geom_hex(bins = 40, color = &amp;quot;black&amp;quot;, size = 0.5)+
  scale_y_percent()+
  scale_x_percent()+
  labs(x = &amp;quot;Comparecimento&amp;quot;, y = &amp;quot;% de votos no RU&amp;quot;)+
  scale_fill_viridis_c()+
  theme_ipsum_tw()+
  labs(title  = &amp;quot;Comparecimento x voto no Rússia Unida&amp;quot;,
       fill = &amp;quot;Nº de seções&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://mateuspestana.github.io/post/imprimindo_graficos/2019-11-15-imprimindo-gra%CC%81ficos-em-3d-no-r_files/figure-html/grafico_2d-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;No gráfico acima, temos duas regiões esverdeadas-amareladas: entre 25% e 50% dos ambos os eixos, e próximo de 100% nos dois eixos. O que isso significa? Significa que existiram muitas seções cujo comparecimento (ou seja, a proporção de pessoas que foram votar) ficou entre 25%-50% e que os votos para o partido Rússia Unida ficaram também entre 25%-50%, e também muitas seções cujo comparecimento foi próximo à 100% e o voto no partido também, ou seja, alta mobilização para que seções inteiras votassem no RU. Percebemos também a oposição, já que temos algumas seções com 100% de comparecimento mas pouco voto no Rússia Unida. Todavia, essas seções são poucas e continuam na cor mais escura da escala.&lt;/p&gt;
&lt;p&gt;Definitivamente, esse não é o mais fácil dos gráficos, e mesmo explicando, é preciso dedicar alguns segundos ou minutos observando-o para compreendê-lo por completo. Mas e se a pessoa para quem queremos transmitir essa informação não for capaz de enxergar, como pessoas com deficiência visual? É justo que elas fiquem excluídas do processo de construção da ciência, ou mesmo de uma exposição simples e descomprometida de dados, como um relatório de uma empresa ou um gráfico de um jornal?&lt;/p&gt;
&lt;p&gt;Pensei sobre isso ao perceber que, cada vez mais, museus oferecem experiências táteis para que pessoas com deficiência visual possam se entreter e aproveitar as exposições. Em uma recente exposição que fui, chamada &lt;a href=&#34;http://culturabancodobrasil.com.br/portal/egito-antigo-do-cotidiano-a-eternidade/&#34;&gt;“Antigo Egito: do cotidiano à eternidade”&lt;/a&gt;, exibida no &lt;a href=&#34;http://culturabancodobrasil.com.br/portal/rio-de-janeiro/&#34;&gt;Centro Cultural do Banco do Brasil no Rio de Janeiro&lt;/a&gt;, diversas peças exibidas possuíam uma variante que permitia o toque: a mesma peça, em um tamanho reduzido, presa na parede, o que possibilitava a inclusão e tornava a exposição mais democrática.&lt;/p&gt;
&lt;p&gt;Olhando para aquilo, pensei: e se construíssemos gráficos em três dimensões, imprimindo em uma impressora 3D, para que eles pudessem ser tocados e compreendidos por aqueles que não podem enxergá-lo?&lt;/p&gt;
&lt;p&gt;Depois de uma extensa pesquisa, descobri um pacote para o R chamado &lt;a href=&#34;https://github.com/tylermorganwall/rayshader/&#34;&gt;&lt;em&gt;rayshader&lt;/em&gt;&lt;/a&gt;, que foi criado inicialmente com o intuito de criar mapas topográficos em 3D, com luz e sombra, além da possibilidade de rotação. O mesmo gráfico acima é exibido da seguinte forma, usando af função &lt;code&gt;plot_gg()&lt;/code&gt; e os ajustes de câmera com a função &lt;code&gt;render_camera()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;grafico &amp;lt;- duma2016 %&amp;gt;%
  mutate(pct_edinayarossiya = p_edinayarossiya/(ncedval + ncedinval),
         compa = (ncedval+ncedinval)/nelelist) %&amp;gt;%
  ggplot(aes(x = compa, 
             y = pct_edinayarossiya))+
  geom_hex(bins = 40, 
           color = &amp;quot;black&amp;quot;, 
           size = 0.5)+
  scale_y_percent()+
  scale_x_percent()+
  labs(x = &amp;quot;Comparecimento&amp;quot;, 
       y = &amp;quot;% de votos no RU&amp;quot;)+
  scale_fill_viridis_c()+
  labs(fill = &amp;quot;Seções&amp;quot;)

plot_gg(grafico)
render_camera(fov = 70, zoom = 0.5, theta = 30, phi = 32)
render_snapshot(clear = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://mateuspestana.github.io/post/imprimindo_graficos/2019-11-15-imprimindo-gra%CC%81ficos-em-3d-no-r_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;O passo que falta, agora, para torná-lo definitivamente mais acessível, é transformá-lo em um modelo 3D. O &lt;code&gt;rayshader&lt;/code&gt; possui a função &lt;code&gt;save_3dprint()&lt;/code&gt;, que permite exportar o modelo para um arquivo &lt;strong&gt;&lt;em&gt;.stl&lt;/em&gt;&lt;/strong&gt; , de &lt;em&gt;stereolithography&lt;/em&gt;, que também pode ser processado por uma fatiadora e direcionado para uma impressora 3D, sendo esse o objetivo: imprimir os gráficos em 3D. Para isso, utilizamos o comando abaixo para gerar o &lt;strong&gt;&lt;em&gt;.stl&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;save_3dprint(filename = &amp;quot;graf_russia.stl&amp;quot;, remove_extras = T, clear = T)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E após isso, processamos o arquivo em uma fatiadora. No caso, eu utilizo o software Flashprint, que dialoga com as impressoras Flashforge. O arquivo gerado, ao ser processado pela fatiadora, fica da seguinte forma:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mateuspestana.github.io/img/graf_russia_fatiadora.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Depois de impresso (levou em torno de 47 minutos, como podem ver na imagem acima, e gastou cerca de 2,63m de filamento PLA – ácido polilático, um polímero), temos o seguinte resultado:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mateuspestana.github.io/img/graf_russia_print.jpeg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;É possível perceber que no modelo redimensionado, alguns detalhes se perderam, mas ainda assim, facilita para as pessoas que possuem alguma deficiência visual de entenderem o tipo de informação que queremos passar.&lt;/p&gt;
&lt;p&gt;Impressoras 3D estão cada vez mais baratas, assim como o material usado para a impressão. De qualquer forma, para quem precisar fazer um uso pontual, é possível imprimir modelos em &lt;strong&gt;&lt;em&gt;.stl&lt;/em&gt;&lt;/strong&gt; em diversas lojas e fornecedores, de maneira rápida e fácil.&lt;/p&gt;
&lt;p&gt;Certamente, não haverá uma rápida popularização do método, porém, provar que é possível (e pelo R) já é um grande avanço em direção à acessibilidade e à inclusão, tão necessários não só na ciência, como em todos os campos da sociedade. É importante também colocar tais modelos impressos para consulta de deficientes visuais para que sejam testados por eles, adequando-os às necessidades percebidas, seja em tamanho, precisão ou organização da impressão.&lt;/p&gt;
&lt;p&gt;Bom, por hoje é só. Agradeço principalmente ao criador do pacote &lt;code&gt;rayshader&lt;/code&gt;, &lt;a href=&#34;https://twitter.com/tylermorganwall&#34;&gt;Tyler Morgan-Wall&lt;/a&gt;, PhD em Física na Universidade John Hopkins. Qualquer dúvida, correção ou sugestão pode ser enviada para o meu email &lt;a href=&#34;mailto:matheus.pestana@iesp.uerj.br&#34; class=&#34;email&#34;&gt;matheus.pestana@iesp.uerj.br&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>geomantR - Pacote do R para geomancia</title>
      <link>https://mateuspestana.github.io/post/geomantr/geomantr-pacote-do-r-para-geomancia/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://mateuspestana.github.io/post/geomantr/geomantr-pacote-do-r-para-geomancia/</guid>
      <description>
&lt;script src=&#34;https://mateuspestana.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;A geomancia é uma arte divinatória árabe que remonta os séculos, sendo descoberta pela Europa na Idade Média, onde foi amplamente utilizada. Consiste em uma técnica de, ao fazer pontos na areia, identificar padrões ativos (ímpares) ou passivos (pares), e traçar figuras a partir disso. Cada figura consiste de quatro linhas, que podem ter um (ativo) ou dois (passivo) pontos.&lt;/p&gt;
&lt;p&gt;Existem 16 figuras, que possuem nomes em latim: &lt;em&gt;via, populus, puer, puella, fortuna major, fortuna minor, albus, rubeus, caput draconis, cauda draconis, acquisitio, amissio, conjuctio, carcer, laetitia&lt;/em&gt; e &lt;em&gt;tristitia&lt;/em&gt;. Cada uma das figuras possui uma ligação com um signo, uma casa astrológica, um planeta, um elemento, enfim, um significado. A partir da formação de 4 figuras, denominadas mães, é possível gerar toda uma tábua geomântica que responderá a uma questão feita pelo Querente, ou seja, aquele que pergunta.&lt;/p&gt;
&lt;p&gt;Por motivos de diversão, desenvolvi um pacote para R que executa todo o cálculo e plota, no console, em Markdown, a tábua geomântica, com suas respectivas informações, prontas para serem interpretadas por aqueles que sabem.&lt;/p&gt;
&lt;p&gt;O pacote está disponível em &lt;a href=&#34;https://github.com/mateuspestana/geomantR&#34; class=&#34;uri&#34;&gt;https://github.com/mateuspestana/geomantR&lt;/a&gt;, e pode ser instalado e utilizado no R pelo comando:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# install.packages(&amp;quot;devtools&amp;quot;) # instala o devtools
devtools::install_github(&amp;quot;mateuspestana/geomantR&amp;quot;) # baixa e instala o pacote
library(geomantR) # carrega a biblioteca
geomantR() # função que gera a tábua geomância
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A seguir, um exemplo de saída, em markdown, dada pela função:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;center&#34;&gt;Filha 4&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Filha 3&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Filha 2&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Filha 1&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Mãe 4&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Mãe 3&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Mãe 2&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Mãe 1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;center&#34;&gt;Sobrinho 4&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Sobrinho 3&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Sobrinho 2&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Sobrinho 1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;center&#34;&gt;Test. Esq.&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Test. Dir.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;center&#34;&gt;Juiz&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;o o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Bom, por hoje é só! Qualquer dúvida, sugestão ou correção pode ser enviada para &lt;a href=&#34;mailto:matheus.pestana@iesp.uerj.br&#34; class=&#34;email&#34;&gt;matheus.pestana@iesp.uerj.br&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
